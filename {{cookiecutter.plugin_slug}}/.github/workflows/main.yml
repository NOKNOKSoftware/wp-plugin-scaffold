{%- raw -%}
name: Build & Release

on:
  push:
    tags:
    - '*'

jobs:
  build:
    runs-on: ubuntu-latest

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Sets vars variable for git tag and repo name
      - name: Build setup
        id: vars
        run: |
          echo ::set-output name=tagName::${GITHUB_REF#refs/*/}
          echo ::set-output name=repoName::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
          
      # Setup Node JS Environment to use gulp
      - name: Setup NodeJS
        uses: actions/setup-node@v2.1.2
        with:
          # Set always-auth in npmrc
          always-auth: false
          # Version Spec of the version to use.  Examples: 12.x, 10.15.1, >=10.15.0
          node-version: 19.x # optional
          # Set this option if you want the action to check for the latest available version that satisfies the version spec
          check-latest: false # optional

      # Install NodeJS dependenciess
      - name: Install NodeJS dependencies
        run: npm install
      
      - run: gulp install

      # Running gulp build
      - name: Build CSS & JS
        run: gulp build

      # Cache composer dependencies
      - name: Setup composer cache
        uses: actions/cache@v2
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      # Setup composer
      - name: Install PHP dependencies
        uses: php-actions/composer@v6
        with:
          ssh_key: ${{ secrets.NOKNOK_DEPLOY_RSA }}
          ssh_key_pub: ${{ secrets.NOKNOK_DEPLOY_RSA_PUB }}
          php_version: 8.0
          

      # Create the plugin zipfile
      - name: Create plugin zipfile
        run: gulp pack

      # Create Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: ${{ contains( github.ref, 'pre' ) }}


      # Create Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: ${{ contains( github.ref, 'pre' ) }}

      # Upload Release
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: {%- endraw -%}./{{cookiecutter.plugin_slug}}{%- raw -%}.zip
          asset_name: ${{ steps.vars.outputs.repoName }}-${{ steps.vars.outputs.tagName }}.zip
          asset_content_type: application/zip
{%- endraw -%}